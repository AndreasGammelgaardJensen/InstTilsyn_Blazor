@page "/institutions"


@using ModelsLib.Models
@using ModelsLib.Models.TabelModels
@inject HttpClient Http
@inject IJSRuntime JS
<PageTitle>Institutions</PageTitle>

<div style="padding: 20px">

	@if(institutions == null)
	{
		<MudContainer Class="d-flex justify-content-center">
			<MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />

	</MudContainer>
	}
	else
	{
		<div class="d-none d-md-flex">
			<MudTable Items="@searchInstitutions" Hover="true" MultiSelection="true" Dense="true" FixedHeader="true" Height="100vh">
				<ToolBarContent>
					<MudText Typo="Typo.h6">Periodic Elements</MudText>
					<MudSpacer />
					<MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
								  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				</ToolBarContent>

				<HeaderContent>
					<MudTh></MudTh>
					<MudTh></MudTh>
				<MudTh><MudTableSortLabel SortBy="new Func<InstitutionTableModel, object>(x=>x.InstitutionFrontPageModel.Name)">Name</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<InstitutionFrontPageModel, object>(x=>x.TypeEnum)">Type</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<InstitutionFrontPageModel, object>(x=>x.TypeEnum)">Pladser</MudTableSortLabel></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTh></MudTh>
					<MudTd><MudButton Class="no-border-button" Variant="Variant.Outlined" OnClick="@(() => ShowBtnPress(context.InstitutionFrontPageModel.Id))">@((context.ShowAdditionalInfo == true) ? "v" : ">")</MudButton></MudTd>
					<MudTd DataLabel="Name">@context.InstitutionFrontPageModel.Name</MudTd>
					<MudTd DataLabel="Type">@context.InstitutionFrontPageModel.TypeEnum</MudTd>
					<MudTd DataLabel="Pladser">@(ToOrientation(context.InstitutionFrontPageModel))</MudTd>
				</RowTemplate>
				<LoadingContent>
					<MudText>Loading...</MudText>
				</LoadingContent>
				<ChildRowContent>
					@if (context.ShowAdditionalInfo)
					{
					<MudTr>
					<td colspan="8">
					<MudCard Elevation="0">
					<MudCardHeader>
					<CardHeaderContent>
					<MudText Typo="Typo.body1"><strong>Indsatser </strong></MudText>
					</CardHeaderContent>
					</MudCardHeader>
					<MudCardContent Class="pa-0">
					<MudTable Items="@context.ReportTabelModel" Context="Rapport" Hover="true" Breakpoint="Breakpoint.Xs" Elevation="0">
				
					<HeaderContent>
												<MudTh>Rapport</MudTh>
					@foreach (var indsats in context.ReportTabelModel.FirstOrDefault().Criteria)
					{
						<MudTh>@indsats.CategoriText</MudTh>
					}
					</HeaderContent>
										<RowTemplate>
											<div class=" mud-table-cell d-flex justify-center align-content-center" style="height:100%">
												<MudIcon @onclick="() => OnFileClicked(Rapport.FileUrl)" Icon="@Icons.Material.Filled.FileOpen" Title="Favorite" />
											</div>
					@foreach (var tt in @Rapport.Criteria)
					{
						<MudTd>@tt.Indsats</MudTd>
					}
					</RowTemplate>
					</MudTable>
					</MudCardContent>
					</MudCard>
					</td>
					</MudTr>
					}
			</ChildRowContent>
			</MudTable>
		</div>
	}




</div>

@code {
	protected override async Task OnInitializedAsync()
	{
		try
		{
			var client = new HttpClient();
			var ts = await client.GetFromJsonAsync<List<InstitutionTableModel>>("https://localhost:7051/api/Institution");

			institutions = ts.OrderByDescending(x => x.InstitutionFrontPageModel.TypeEnum).ToArray();
			searchInstitutions = institutions;

		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}


	private static IEnumerable<InstitutionTableModel> institutions { get; set; }
	private static IEnumerable<InstitutionTableModel> searchInstitutions { get; set; }
	private string searchString = null;


	private void ShowBtnPress(Guid nr)
	{
		InstitutionTableModel tmpPerson = institutions.FirstOrDefault(f => f.InstitutionFrontPageModel.Id == nr);
		tmpPerson.ShowAdditionalInfo = !tmpPerson.ShowAdditionalInfo;
	}

	public string ToOrientation(InstitutionFrontPageModel direction)
	{

		if (direction == null || direction.TypeEnum == null || direction.pladser == null)
		{
			return "";
		}

		return direction.TypeEnum switch
		{
			InstitutionTypeEnum.Vuggestue => direction.pladser.VuggestuePladser.ToString(),
			InstitutionTypeEnum.Boernehave => direction.pladser.BoernehavePladser.ToString(),
			InstitutionTypeEnum.Dagpleje => direction.pladser.DagplejePladser.ToString(),
			InstitutionTypeEnum.Integreret => $"Børnehave {direction.pladser.BoernehavePladser}, Vuggestue {direction.pladser.VuggestuePladser}",
			_ => throw new ArgumentOutOfRangeException(nameof(direction), $"Not expected direction value: {direction}"),
		};
	}

	private async void OnSearch(string text)
	{
		searchString = text;
		searchInstitutions = institutions.Where(element =>
		{
			if (string.IsNullOrWhiteSpace(searchString))
				return true;
			if (element.InstitutionFrontPageModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
				return true;
			return false;
		}).ToArray();
	}

	private object OnFileClicked(string fileUrl)
	{
		JS.InvokeVoidAsync("openInNewTab", fileUrl);

		return true;
	}

}