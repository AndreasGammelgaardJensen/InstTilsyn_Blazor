@page "/institutions"


@using GeolocationLib
@using Gravam.Blazor.DeviceInterop.Geolocation
@using ModelsLib.Models
@using ModelsLib.Models.TabelModels
@inject HttpClient Http
@inject IGeolocationService GeolocationService
@inject IJSRuntime JS
<PageTitle>Institutions</PageTitle>

<div style="padding: 20px">

	@if(institutions == null && ErrorMessage == null)
	{
		<MudContainer Class="d-flex justify-content-center">
			<MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />

		</MudContainer>
	}
	else if (ErrorMessage != null)
	{
		<MudText Typo="Typo.h6">@ErrorMessage</MudText>
	}
	else
	{
		<div class="d-none d-md-flex">
			<MudTable Items="@searchInstitutions" Hover="true" MultiSelection="true" Dense="true" FixedHeader="true" Height="100vh" Class="parent-card">
				<ToolBarContent>
					<MudText Typo="Typo.h6">Institutions</MudText>
					<MudSpacer />
					<MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search more than one - use '//' between names " Adornment="Adornment.Start"
								  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				</ToolBarContent>

				<HeaderContent>
					<MudTh></MudTh>
					<MudTh></MudTh>
				<MudTh><MudTableSortLabel SortBy="new Func<InstitutionTableModel, object>(x=>x.InstitutionFrontPageModel.Name)">Name</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<InstitutionTableModel, object>(x=>x.Distance)">Afstand</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<InstitutionTableModel, object>(x=>(int)x.InstitutionFrontPageModel.TypeEnum)">Type</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<InstitutionTableModel, object>(x=>x.InstitutionFrontPageModel.pladser.DagplejePladser)">Pladser</MudTableSortLabel></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTh></MudTh>
					<MudTd><MudButton Class="border-none tabelbutton" Size="Size.Small" Variant="Variant.Filled" Disabled="@(!context.ReportTabelModel.Any())" Color="Color.Primary" OnClick="@(() => ShowBtnPress(context.InstitutionFrontPageModel.Id))">@((context.ShowAdditionalInfo == true) ? "luk detaljer" : "vis detaljer")</MudButton></MudTd>
					<MudTd DataLabel="Name">@context.InstitutionFrontPageModel.Name</MudTd>
					<MudTh>@(context.Distance) km</MudTh>
					<MudTd DataLabel="Type">@context.InstitutionFrontPageModel.TypeEnum</MudTd>
					<MudTd DataLabel="Pladser">@(DefinePladser(context.InstitutionFrontPageModel))</MudTd>
				</RowTemplate>
				<LoadingContent>
					<MudText>Loading...</MudText>
				</LoadingContent>
				<ChildRowContent>
					@if (context.ShowAdditionalInfo)
					{
					<MudTr>
					<td colspan="8">
								<MudCard Elevation="0" Class="child">
					<MudCardHeader>
					<CardHeaderContent>
					<MudText Typo="Typo.body1"><strong>Indsatser </strong></MudText>
					</CardHeaderContent>
					</MudCardHeader>
						<MudCardContent Class="pa-0 child">
							<MudTable Items="@context.ReportTabelModel" Context="Rapport" Hover="true" Elevation="0" Class="child">
								<HeaderContent>
									<MudTh>Åben Rapport</MudTh>

							@if (context.ReportTabelModel.FirstOrDefault().Criteria is not null)
							{
								@foreach (var indsats in context.ReportTabelModel.FirstOrDefault().Criteria)
								{
									<MudTh>@indsats.CategoriText</MudTh>
								}
							}				
						</HeaderContent>
						<RowTemplate>
							<div class=" mud-table-cell d-flex justify-center align-content-center" style="height:100%">
								<MudIconButton Icon="@Icons.Material.Filled.FileOpen" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="@(() => OnFileClicked(Rapport.FileUrl))" />
							</div>

											
						@if (@Rapport.Criteria is not null)
						{
							@foreach (var tt in @Rapport.Criteria)
							{
								<MudTd>@tt.Indsats</MudTd>
							}
						}
						</RowTemplate>
						</MudTable>
					</MudCardContent>
					</MudCard>
					</td>
					</MudTr>
					}
			</ChildRowContent>
			</MudTable>
		</div>

		<div class="d-flex d-md-none">
			<MudTable Items="@searchInstitutions" Hover="true" Dense="true" FixedHeader="false" Height="100vh" Elevation="2" Class="parent-card">
				<ToolBarContent>
					<MudText Typo="Typo.h6">Institutions</MudText>
					<MudSpacer />
					<MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search more than one - use '//' between names " Adornment="Adornment.Start"
								  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				</ToolBarContent>

			
				<RowTemplate>
					<MudTd DataLabel="Name">@context.InstitutionFrontPageModel.Name</MudTd>
					<MudTd DataLabel="Pladser">@(DefinePladser(context.InstitutionFrontPageModel))</MudTd>
					<MudTd DataLabel="Type">@context.InstitutionFrontPageModel.TypeEnum</MudTd>
					<MudTd DataLabel="Afstand">@(context.Distance) km</MudTd>
					<MudTd><MudButton Class="border-none" Disabled="@(!context.ReportTabelModel.Any())" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ShowBtnPress(context.InstitutionFrontPageModel.Id))">@((context.ShowAdditionalInfo == true) ? "luk detaljer" : "vis detaljer")</MudButton></MudTd>

				</RowTemplate>
				<ChildRowContent>
					@if (context.ShowAdditionalInfo)
					{
						<MudTr>
							<td colspan="8">
								<MudCard Elevation="0" Class="child">
									<MudCardContent Class="pa-0">
										<MudTable Items="@context.ReportTabelModel" Context="Rapport" Hover="true" Elevation="0" Class="child">
										<RowTemplate>

												<MudTd DataLabel="Åben Rapport">
												<div class=" mud-table-cell d-flex justify-center align-content-center" style="height:100%">
														<MudIconButton Icon="@Icons.Material.Filled.FileOpen" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="@(() => OnFileClicked(Rapport.FileUrl))" />
													</div>
											</MudTd>
												@if (@Rapport.Criteria is not null)
											{
												@foreach (var tt in @Rapport.Criteria)
												{
													<MudTd Class="d-flex tester" DataLabel="@tt.CategoriText">@tt.Indsats</MudTd>
												}
											}
											
										</RowTemplate>
									</MudTable>
								</MudCardContent>
							</MudCard>
						</td>
					</MudTr>
					}
				</ChildRowContent>
			</MudTable>
		</div>
	}




</div>

<style>
	.parent-card {
		background-color: white;

		.child {
			background-color: @Colors.Blue.Lighten4;
			font-size:10px;
		}

	.child * {
		font-size: inherit; /* Inherit the font size from the container */
	}
	}

	.tabelbutton {
		font-size: 10px;
	}
</style>

@code {
	protected override async Task OnInitializedAsync()
	{
		currentPositionResult = await GeolocationService.GetCurrentPosition();
		try
		{
			var client = new HttpClient();
			var ts = await client.GetFromJsonAsync<List<InstitutionTableModel>>("https://tilsynsrapportapi20240608132021.azurewebsites.net/api/Institution");
			// var ts = await client.GetFromJsonAsync<List<InstitutionTableModel>>("https://localhost:7051/api/Institution");

			institutions = ts.OrderByDescending(x => x.InstitutionFrontPageModel.TypeEnum).ToArray();

			foreach (var inst in institutions)
			{
				inst.Distance = GeoCalculationHelper.CalculateDistance(inst.InstitutionFrontPageModel.Koordinates.lat ?? 0.0, inst.InstitutionFrontPageModel.Koordinates.lng ?? 0.0, currentPositionResult.Position.Coords.Latitude, currentPositionResult.Position.Coords.Longitude);
			}

			searchInstitutions = institutions;

		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
			Console.WriteLine(ex);
		}
	}
	 
	private static string ErrorMessage { get; set; } = null;
	private static Gravam.Blazor.DeviceInterop.Geolocation.GeolocationResult currentPositionResult { get; set; }
	private static IEnumerable<InstitutionTableModel> institutions { get; set; }
	private static IEnumerable<InstitutionTableModel> searchInstitutions { get; set; }
	private string searchString = null;


	private void ShowBtnPress(Guid nr)
	{
		InstitutionTableModel tmpPerson = institutions.FirstOrDefault(f => f.InstitutionFrontPageModel.Id == nr);
		tmpPerson.ShowAdditionalInfo = !tmpPerson.ShowAdditionalInfo;
	}

	public string DefinePladser(InstitutionFrontPageModel direction)
	{

		if (direction == null || direction.TypeEnum == null || direction.pladser == null)
		{
			return "";
		}

		return direction.TypeEnum switch
		{
			InstitutionTypeEnum.Vuggestue => direction.pladser.VuggestuePladser.ToString(),
			InstitutionTypeEnum.Boernehave => direction.pladser.BoernehavePladser.ToString(),
			InstitutionTypeEnum.Dagpleje => direction.pladser.DagplejePladser.ToString(),
			InstitutionTypeEnum.Integreret => $"Børnehave {direction.pladser.BoernehavePladser}, Vuggestue {direction.pladser.VuggestuePladser}",
			_ => throw new ArgumentOutOfRangeException(nameof(direction), $"Not expected direction value: {direction}"),
		};
	}

	private async void OnSearch(string text)
	{
		searchString = text;

		var searchStrings = searchString.Split("//").ToList();

		searchInstitutions = institutions.Where(element =>
		{
			if (string.IsNullOrWhiteSpace(searchString))
				return true;
			
			if (searchStrings.Any(s => element.InstitutionFrontPageModel.Name.Contains(s, StringComparison.OrdinalIgnoreCase)))
				return true;
			return false;
		}).ToArray();
	}

	private object OnFileClicked(string fileUrl)
	{
		JS.InvokeVoidAsync("openInNewTab", fileUrl);

		return true;
	}
}